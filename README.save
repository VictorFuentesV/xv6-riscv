
## INFORME TAREA 2
El funcionamiento de esta tarea tiene que ver con el sistema de prioridad, donde tenemos prioridad y boost, prioridad refiriendose a la prioridad de los archivos donde el valor más bajo indica mayor prioridad, y un boost que aumenta la prioridad del proceso cuando se ejectua.
De esta manera ejecutamos a todos los hijos luego del proceso padre, con la prioridad correspondiente, y cada vez que se ejecuta se incrementa la prioridad de todos los demas procesos.
La lógica nos permite ejecutar los procesos con más prioridad antes que los que tienen menos prioridad.
## MODIFICACIONES
los archivos que fueron alterados fueron: "proc.c", "proc.h", "Makefile" y "README"
El archivo creado tiene el nombre de "proritytest.c"
# proc.c: 
En este archivo se añadio en allocproc() los campos "priority" y "boost". También se modifico scheluder() para que seleccione procesos en base a su prioridad.
# proc.h: 
Se añadieron los campos "priority" y "boost" en la estructura (struct proc).
# Makefile: 
Se añadió en UPROGS "$U/_prioritytest\"
# README:
Se modificó para añadir el informe de la tarea.
# prioritytest.c:
Se creó este archivo para poder tener el programa creado y funcional.

## DIFICULTADES ENCONTRADAS
En el trancurso del trabajo pude encontrar problemas con el archivo principal de qemu, donde se tuvieron que realizar cambios al archivo "riscv.h" para poder ejecutar qemu sin problemas.
Dificultades a la hora de entregar 20 procesos funcionales, ya que el primero siempre salia con problemas. La solución a esto fue realizar 21 procesos para asi tener 20 procesos coherentes.
